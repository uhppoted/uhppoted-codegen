package model

import (
	"net/netip"
)

var Tests = []Test{
	GetControllerTest,
	SetIPv4Test,
	GetTimeTest,
	SetTimeTest,
	GetStatusTest,
	GetStatusNoEventTest,
	GetListenerTest,
	SetListenerTest,
	GetDoorControlTest,
	SetDoorControlTest,
	OpenDoorTest,
	GetCardsTest,
	GetCardTest,
	GetCardAtIndexTest,
	PutCardTest,
	DeleteCardTest,
	DeleteAllCardsTest,
	GetEventTest,
	GetEventIndexTest,
	SetEventIndexTest,
	RecordSpecialEventsTest,
	GetTimeProfileTest,
	SetTimeProfileTest,
	DeleteAllTimeProfilesTest,
	AddTaskTest,
	RefreshTaskListTest,
	ClearTaskListTest,
	SetPCControlTest,
	SetInterlockTest,
	ActivateKeypadsTest,
	SetDoorPasscodesTest,
	GetAntiPassbackTest,
	SetAntiPassbackTest,
	RestoreDefaultParametersTest,
}

const CONTROLLER = "405419896"
const DOOR = "3"
const CARD = "8165538"
const CARD_INDEX = "3"
const EVENT_INDEX = "37"
const TIME_PROFILE_ID = "29"

var GetControllerTest = Test{
	Name: "get controller",
	Request: &TestRequest{
		Name: GetControllerRequest.Name,
		Values: []Value{
			Value{
				Name:  "controller",
				Type:  "uint32",
				Value: CONTROLLER,
			},
		},
		Message: []uint8{
			0x17, 0x94, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		},
	},
	Response: &TestResponse{
		Name: GetControllerResponse.Name,
		Values: []Value{
			Value{
				Name:  "controller",
				Type:  "uint32",
				Value: CONTROLLER,
			},
			Value{
				Name:  "ip address",
				Type:  "IPv4",
				Value: "192.168.1.100",
			},
			Value{
				Name:  "subnet mask",
				Type:  "IPv4",
				Value: "255.255.255.0",
			},
			Value{
				Name:  "gateway",
				Type:  "IPv4",
				Value: "192.168.1.1",
			},
			Value{
				Name:  "MAC address",
				Type:  "string",
				Value: "00:12:23:34:45:56",
			},
			Value{
				Name:  "version",
				Type:  "string",
				Value: "v8.92",
			},
			Value{
				Name:  "date",
				Type:  "date",
				Value: "2018-11-05",
			},
		},
		Message: []uint8{
			0x17, 0x94, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0xc0, 0xa8, 0x01, 0x64, 0xff, 0xff, 0xff, 0x00,
			0xc0, 0xa8, 0x01, 0x01, 0x00, 0x12, 0x23, 0x34, 0x45, 0x56, 0x08, 0x92, 0x20, 0x18, 0x11, 0x05,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		},
	},
}

var SetIPv4Test = Test{
	Name: "set IPv4",
	Request: &TestRequest{
		Name: SetIPv4Request.Name,
		Values: []Value{
			Value{
				Name:  "controller",
				Type:  "uint32",
				Value: CONTROLLER,
			},
			Value{
				Name:  "address",
				Type:  "IPv4",
				Value: netip.MustParseAddr("192.168.1.100"),
			},
			Value{
				Name:  "netmask",
				Type:  "IPv4",
				Value: netip.MustParseAddr("255.255.255.0"),
			},
			Value{
				Name:  "gateway",
				Type:  "IPv4",
				Value: netip.MustParseAddr("192.168.1.1"),
			},
		},
		Message: []uint8{
			0x17, 0x96, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0xc0, 0xa8, 0x01, 0x64, 0xff, 0xff, 0xff, 0x00,
			0xc0, 0xa8, 0x01, 0x01, 0x55, 0xaa, 0xaa, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
	},
}

var GetTimeTest = Test{
	Name: "get time",
	Request: &TestRequest{
		Name: GetTimeRequest.Name,
		Values: []Value{
			Value{
				Name:  "controller",
				Type:  "uint32",
				Value: CONTROLLER,
			},
		},
		Message: []uint8{
			0x17, 0x32, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		},
	},
	Response: &TestResponse{
		Name: GetTimeResponse.Name,
		Values: []Value{
			Value{
				Name:  "controller",
				Type:  "uint32",
				Value: CONTROLLER,
			},
			Value{
				Name:  "datetime",
				Type:  "datetime",
				Value: "2022-08-23 09:48:09",
			},
		},
		Message: []uint8{
			0x17, 0x32, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x20, 0x22, 0x08, 0x23, 0x09, 0x48, 0x09, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		},
	},
}

var SetTimeTest = Test{
	Name: "set time",
	Request: &TestRequest{
		Name: SetTimeRequest.Name,
		Values: []Value{
			Value{
				Name:  "controller",
				Type:  "uint32",
				Value: CONTROLLER,
			},
			Value{
				Name:  "datetime",
				Type:  "datetime",
				Value: "2022-08-23 09:49:03",
			},
		},
		Message: []uint8{
			0x17, 0x30, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x20, 0x22, 0x08, 0x23, 0x09, 0x49, 0x03, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		},
	},
	Response: &TestResponse{
		Name: SetTimeResponse.Name,
		Values: []Value{
			Value{
				Name:  "controller",
				Type:  "uint32",
				Value: CONTROLLER,
			},
			Value{
				Name:  "datetime",
				Type:  "datetime",
				Value: "2022-08-23 09:49:03",
			},
		},
		Message: []uint8{
			0x17, 0x30, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x20, 0x22, 0x08, 0x23, 0x09, 0x49, 0x03, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		},
	},
}

var GetStatusTest = Test{
	Name: "get status",
	Request: &TestRequest{
		Name: GetStatusRequest.Name,
		Values: []Value{
			Value{
				Name:  "controller",
				Type:  "uint32",
				Value: CONTROLLER,
			},
		},
		Message: []uint8{
			0x17, 0x20, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		},
	},
	Response: &TestResponse{
		Name: GetStatusResponse.Name,
		Values: []Value{
			Value{
				Name:  "controller",
				Type:  "uint32",
				Value: CONTROLLER,
			},
			Value{
				Name:  "system date",
				Type:  "short date",
				Value: "2022-08-23",
			},
			Value{
				Name:  "system time",
				Type:  "time",
				Value: "09:49:39",
			},
			Value{
				Name:  "door 1 open",
				Type:  "bool",
				Value: false,
			},
			Value{
				Name:  "door 2 open",
				Type:  "bool",
				Value: true,
			},
			Value{
				Name:  "door 3 open",
				Type:  "bool",
				Value: false,
			},
			Value{
				Name:  "door 4 open",
				Type:  "bool",
				Value: false,
			},
			Value{
				Name:  "door 1 button",
				Type:  "bool",
				Value: false,
			},
			Value{
				Name:  "door 2 button",
				Type:  "bool",
				Value: false,
			},
			Value{
				Name:  "door 3 button",
				Type:  "bool",
				Value: false,
			},
			Value{
				Name:  "door 4 button",
				Type:  "bool",
				Value: true,
			},
			Value{
				Name:  "relays",
				Type:  "uint8",
				Value: "7",
			},
			Value{
				Name:  "inputs",
				Type:  "uint8",
				Value: "9",
			},
			Value{
				Name:  "system error",
				Type:  "uint8",
				Value: 3,
			},
			Value{
				Name:  "special info",
				Type:  "uint8",
				Value: 39,
			},
			Value{
				Name:  "event index",
				Type:  "uint32",
				Value: 78,
			},
			Value{
				Name:  "event type",
				Type:  "uint8",
				Value: 2,
			},
			Value{
				Name:  "event access granted",
				Type:  "bool",
				Value: true,
			},
			Value{
				Name:  "event door",
				Type:  "uint8",
				Value: 3,
			},
			Value{
				Name:  "event direction",
				Type:  "uint8",
				Value: 1,
			},
			Value{
				Name:  "event card",
				Type:  "uint32",
				Value: "8165537",
			},
			Value{
				Name:  "event timestamp",
				Type:  "optional datetime",
				Value: "2022-08-23 09:47:06",
			},
			Value{
				Name:  "event reason",
				Type:  "uint8",
				Value: 44,
			},
			Value{
				Name:  "sequence no",
				Type:  "uint32",
				Value: 0,
			},
		},
		Message: []uint8{
			0x17, 0x20, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x4e, 0x00, 0x00, 0x00, 0x02, 0x01, 0x03, 0x01,
			0xa1, 0x98, 0x7c, 0x00, 0x20, 0x22, 0x08, 0x23, 0x09, 0x47, 0x06, 0x2c, 0x00, 0x01, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x01, 0x03, 0x09, 0x49, 0x39, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x27, 0x07, 0x09, 0x22, 0x08, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		},
	},
}

var GetStatusNoEventTest = Test{
	Name: "get status no event",
	Request: &TestRequest{
		Name: GetStatusRequest.Name,
		Values: []Value{
			Value{
				Name:  "controller",
				Type:  "uint32",
				Value: CONTROLLER,
			},
		},
		Message: []uint8{
			0x17, 0x20, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		},
	},
	Response: &TestResponse{
		Name: GetStatusResponse.Name,
		Values: []Value{
			Value{
				Name:  "controller",
				Type:  "uint32",
				Value: CONTROLLER,
			},
			Value{
				Name:  "system date",
				Type:  "short date",
				Value: "2022-08-23",
			},
			Value{
				Name:  "system time",
				Type:  "time",
				Value: "09:49:39",
			},
			Value{
				Name:  "door 1 open",
				Type:  "bool",
				Value: false,
			},
			Value{
				Name:  "door 2 open",
				Type:  "bool",
				Value: true,
			},
			Value{
				Name:  "door 3 open",
				Type:  "bool",
				Value: false,
			},
			Value{
				Name:  "door 4 open",
				Type:  "bool",
				Value: false,
			},
			Value{
				Name:  "door 1 button",
				Type:  "bool",
				Value: false,
			},
			Value{
				Name:  "door 2 button",
				Type:  "bool",
				Value: false,
			},
			Value{
				Name:  "door 3 button",
				Type:  "bool",
				Value: false,
			},
			Value{
				Name:  "door 4 button",
				Type:  "bool",
				Value: true,
			},
			Value{
				Name:  "relays",
				Type:  "uint8",
				Value: "7",
			},
			Value{
				Name:  "inputs",
				Type:  "uint8",
				Value: "9",
			},
			Value{
				Name:  "system error",
				Type:  "uint8",
				Value: 3,
			},
			Value{
				Name:  "special info",
				Type:  "uint8",
				Value: 39,
			},
			Value{
				Name:  "event index",
				Type:  "uint32",
				Value: 0,
			},
			Value{
				Name:  "event type",
				Type:  "uint8",
				Value: 0,
			},
			Value{
				Name:  "event access granted",
				Type:  "bool",
				Value: false,
			},
			Value{
				Name:  "event door",
				Type:  "uint8",
				Value: 0,
			},
			Value{
				Name:  "event direction",
				Type:  "uint8",
				Value: 0,
			},
			Value{
				Name:  "event card",
				Type:  "uint32",
				Value: "0",
			},
			Value{
				Name:  "event timestamp",
				Type:  "optional datetime",
				Value: "",
			},
			Value{
				Name:  "event reason",
				Type:  "uint8",
				Value: 0,
			},
			Value{
				Name:  "sequence no",
				Type:  "uint32",
				Value: 0,
			},
		},
		Message: []uint8{
			0x17, 0x20, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x01, 0x03, 0x09, 0x49, 0x39, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x27, 0x07, 0x09, 0x22, 0x08, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		},
	},
}

var GetListenerTest = Test{
	Name: "get listener",
	Request: &TestRequest{
		Name: GetListenerRequest.Name,
		Values: []Value{
			Value{
				Name:  "controller",
				Type:  "uint32",
				Value: CONTROLLER,
			},
		},
		Message: []uint8{
			0x17, 0x92, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		},
	},
	Response: &TestResponse{
		Name: GetListenerResponse.Name,
		Values: []Value{
			Value{
				Name:  "controller",
				Type:  "uint32",
				Value: CONTROLLER,
			},
			Value{
				Name:  "address",
				Type:  "IPv4",
				Value: "192.168.1.100",
			},
			Value{
				Name:  "port",
				Type:  "uint16",
				Value: "60001",
			},
			Value{
				Name:  "interval",
				Type:  "uint8",
				Value: "15",
			},
		},
		Message: []uint8{
			0x17, 0x92, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0xc0, 0xa8, 0x01, 0x64, 0x61, 0xea, 0x0f, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		},
	},
}

var SetListenerTest = Test{
	Name: "set listener",
	Request: &TestRequest{
		Name: SetListenerRequest.Name,
		Values: []Value{
			Value{
				Name:  "controller",
				Type:  "uint32",
				Value: CONTROLLER,
			},
			Value{
				Name:  "address",
				Type:  "IPv4",
				Value: netip.MustParseAddr("192.168.1.100"),
			},
			Value{
				Name:  "port",
				Type:  "uint16",
				Value: "60001",
			},
			Value{
				Name:  "interval",
				Type:  "uint8",
				Value: "15",
			},
		},
		Message: []uint8{
			0x17, 0x90, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0xc0, 0xa8, 0x01, 0x64, 0x61, 0xea, 0x0f, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		},
	},
	Response: &TestResponse{
		Name: SetListenerResponse.Name,
		Values: []Value{
			Value{
				Name:  "controller",
				Type:  "uint32",
				Value: CONTROLLER,
			},
			Value{
				Name:  "ok",
				Type:  "bool",
				Value: true,
			},
		},
		Message: []uint8{
			0x17, 0x90, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		},
	},
}

var GetDoorControlTest = Test{
	Name: "get door control",
	Request: &TestRequest{
		Name: GetDoorControlRequest.Name,
		Values: []Value{
			Value{
				Name:  "controller",
				Type:  "uint32",
				Value: CONTROLLER,
			},
			Value{
				Name:  "door",
				Type:  "uint8",
				Value: 3,
			},
		},
		Message: []uint8{
			0x17, 0x82, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		},
	},
	Response: &TestResponse{
		Name: GetDoorControlResponse.Name,
		Values: []Value{
			Value{
				Name:  "controller",
				Type:  "uint32",
				Value: CONTROLLER,
			},
			Value{
				Name:  "door",
				Type:  "uint8",
				Value: 3,
			},
			Value{
				Name:  "mode",
				Type:  "uint8",
				Value: 2,
			},
			Value{
				Name:  "delay",
				Type:  "uint8",
				Value: 10,
			},
		},
		Message: []uint8{
			0x17, 0x82, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x03, 0x02, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		},
	},
}

var SetDoorControlTest = Test{
	Name: "set door control",
	Request: &TestRequest{
		Name: SetDoorControlRequest.Name,
		Values: []Value{
			Value{
				Name:  "controller",
				Type:  "uint32",
				Value: CONTROLLER,
			},
			Value{
				Name:  "door",
				Type:  "uint8",
				Value: 3,
			},
			Value{
				Name:  "mode",
				Type:  "uint8",
				Value: 2,
			},
			Value{
				Name:  "delay",
				Type:  "uint8",
				Value: 10,
			},
		},
		Message: []uint8{
			0x17, 0x80, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x03, 0x02, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		},
	},
	Response: &TestResponse{
		Name: SetDoorControlResponse.Name,
		Values: []Value{
			Value{
				Name:  "controller",
				Type:  "uint32",
				Value: CONTROLLER,
			},
			Value{
				Name:  "door",
				Type:  "uint8",
				Value: 3,
			},
			Value{
				Name:  "mode",
				Type:  "uint8",
				Value: 2,
			},
			Value{
				Name:  "delay",
				Type:  "uint8",
				Value: 10,
			},
		},
		Message: []uint8{
			0x17, 0x80, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x03, 0x02, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		},
	},
}

var OpenDoorTest = Test{
	Name: "open door",
	Request: &TestRequest{
		Name: OpenDoorRequest.Name,
		Values: []Value{
			Value{
				Name:  "controller",
				Type:  "uint32",
				Value: CONTROLLER,
			},
			Value{
				Name:  "door",
				Type:  "uint8",
				Value: "3",
			},
		},
		Message: []uint8{
			0x17, 0x40, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		},
	},
	Response: &TestResponse{
		Name: OpenDoorResponse.Name,
		Values: []Value{
			Value{
				Name:  "controller",
				Type:  "uint32",
				Value: CONTROLLER,
			},
			Value{
				Name:  "opened",
				Type:  "bool",
				Value: true,
			},
		},
		Message: []uint8{
			0x17, 0x40, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		},
	},
}

var GetCardsTest = Test{
	Name: "get cards",
	Request: &TestRequest{
		Name: GetCardsRequest.Name,
		Values: []Value{
			Value{
				Name:  "controller",
				Type:  "uint32",
				Value: CONTROLLER,
			},
		},
		Message: []uint8{
			0x17, 0x58, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		},
	},
	Response: &TestResponse{
		Name: GetCardsResponse.Name,
		Values: []Value{
			Value{
				Name:  "controller",
				Type:  "uint32",
				Value: CONTROLLER,
			},
			Value{
				Name:  "cards",
				Type:  "uint32",
				Value: 11,
			},
		},
		Message: []uint8{
			0x17, 0x58, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		},
	},
}

var GetCardTest = Test{
	Name: "get card",
	Request: &TestRequest{
		Name: GetCardRequest.Name,
		Values: []Value{
			Value{
				Name:  "controller",
				Type:  "uint32",
				Value: CONTROLLER,
			},
			Value{
				Name:  "card",
				Type:  "uint32",
				Value: CARD,
			},
		},
		Message: []uint8{
			0x17, 0x5a, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0xa2, 0x98, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		},
	},
	Response: &TestResponse{
		Name: GetCardResponse.Name,
		Values: []Value{
			Value{
				Name:  "controller",
				Type:  "uint32",
				Value: CONTROLLER,
			},
			Value{
				Name:  "card number",
				Type:  "uint32",
				Value: CARD,
			},
			Value{
				Name:  "start date",
				Type:  "optional date",
				Value: "2022-01-01",
			},
			Value{
				Name:  "end date",
				Type:  "optional date",
				Value: "2022-12-31",
			},
			Value{
				Name:  "door 1",
				Type:  "uint8",
				Value: 0,
			},
			Value{
				Name:  "door 2",
				Type:  "uint8",
				Value: 1,
			},
			Value{
				Name:  "door 3",
				Type:  "uint8",
				Value: 29,
			},
			Value{
				Name:  "door 4",
				Type:  "uint8",
				Value: 0,
			},
			Value{
				Name:  "PIN",
				Type:  "pin",
				Value: 7531,
			},
		},
		Message: []uint8{
			0x17, 0x5a, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0xa2, 0x98, 0x7c, 0x00, 0x20, 0x22, 0x01, 0x01,
			0x20, 0x22, 0x12, 0x31, 0x00, 0x01, 0x1d, 0x00, 0x6b, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		},
	},
}

var GetCardAtIndexTest = Test{
	Name: "get card at index",
	Request: &TestRequest{
		Name: GetCardByIndexRequest.Name,
		Values: []Value{
			Value{
				Name:  "controller",
				Type:  "uint32",
				Value: CONTROLLER,
			},
			Value{
				Name:  "index",
				Type:  "uint32",
				Value: CARD_INDEX,
			},
		},
		Message: []uint8{
			0x17, 0x5c, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		},
	},
	Response: &TestResponse{
		Name: GetCardByIndexResponse.Name,
		Values: []Value{
			Value{
				Name:  "controller",
				Type:  "uint32",
				Value: CONTROLLER,
			},
			Value{
				Name:  "card number",
				Type:  "uint32",
				Value: CARD,
			},
			Value{
				Name:  "start date",
				Type:  "optional date",
				Value: "2022-01-01",
			},
			Value{
				Name:  "end date",
				Type:  "optional date",
				Value: "2022-12-31",
			},
			Value{
				Name:  "door 1",
				Type:  "uint8",
				Value: 0,
			},
			Value{
				Name:  "door 2",
				Type:  "uint8",
				Value: 1,
			},
			Value{
				Name:  "door 3",
				Type:  "uint8",
				Value: 29,
			},
			Value{
				Name:  "door 4",
				Type:  "uint8",
				Value: 0,
			},
			Value{
				Name:  "PIN",
				Type:  "pin",
				Value: 7531,
			},
		},
		Message: []uint8{
			0x17, 0x5c, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0xa2, 0x98, 0x7c, 0x00, 0x20, 0x22, 0x01, 0x01,
			0x20, 0x22, 0x12, 0x31, 0x00, 0x01, 0x1d, 0x00, 0x6b, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		},
	},
}

var PutCardTest = Test{
	Name: "put card",
	Request: &TestRequest{
		Name: PutCardRequest.Name,
		Values: []Value{
			Value{
				Name:  "controller",
				Type:  "uint32",
				Value: CONTROLLER,
			},
			Value{
				Name:  "card",
				Type:  "uint32",
				Value: CARD,
			},
			Value{
				Name:  "start date",
				Type:  "date",
				Value: "2022-01-01",
			},
			Value{
				Name:  "end date",
				Type:  "date",
				Value: "2022-12-31",
			},
			Value{
				Name:  "door1",
				Type:  "uint8",
				Value: "0",
			},
			Value{
				Name:  "door2",
				Type:  "uint8",
				Value: "1",
			},
			Value{
				Name:  "door3",
				Type:  "uint8",
				Value: "29",
			},
			Value{
				Name:  "door4",
				Type:  "uint8",
				Value: "0",
			},
			Value{
				Name:  "PIN",
				Type:  "pin",
				Value: "7531",
			},
		},
		Message: []uint8{
			0x17, 0x50, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0xa2, 0x98, 0x7c, 0x00, 0x20, 0x22, 0x01, 0x01,
			0x20, 0x22, 0x12, 0x31, 0x00, 0x01, 0x1d, 0x00, 0x6b, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		},
	},
	Response: &TestResponse{
		Name: PutCardResponse.Name,
		Values: []Value{
			Value{
				Name:  "controller",
				Type:  "uint32",
				Value: CONTROLLER,
			},
			Value{
				Name:  "stored",
				Type:  "bool",
				Value: true,
			},
		},
		Message: []uint8{
			0x17, 0x50, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		},
	},
}

var DeleteCardTest = Test{
	Name: "delete card",
	Request: &TestRequest{
		Name: DeleteCardRequest.Name,
		Values: []Value{
			Value{
				Name:  "controller",
				Type:  "uint32",
				Value: CONTROLLER,
			},
			Value{
				Name:  "card",
				Type:  "uint32",
				Value: CARD,
			},
		},
		Message: []uint8{
			0x17, 0x52, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0xa2, 0x98, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		},
	},
	Response: &TestResponse{
		Name: DeleteCardResponse.Name,
		Values: []Value{
			Value{
				Name:  "controller",
				Type:  "uint32",
				Value: CONTROLLER,
			},
			Value{
				Name:  "deleted",
				Type:  "bool",
				Value: true,
			},
		},
		Message: []uint8{
			0x17, 0x52, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		},
	},
}

var DeleteAllCardsTest = Test{
	Name: "delete cards",
	Request: &TestRequest{
		Name: DeleteAllCardsRequest.Name,
		Values: []Value{
			Value{
				Name:  "controller",
				Type:  "uint32",
				Value: CONTROLLER,
			},
		},
		Message: []uint8{
			0x17, 0x54, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x55, 0xaa, 0xaa, 0x55, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		},
	},
	Response: &TestResponse{
		Name: DeleteAllCardsResponse.Name,
		Values: []Value{
			Value{
				Name:  "controller",
				Type:  "uint32",
				Value: CONTROLLER,
			},
			Value{
				Name:  "deleted",
				Type:  "bool",
				Value: true,
			},
		},
		Message: []uint8{
			0x17, 0x54, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		},
	},
}

var GetEventTest = Test{
	Name: "get event",
	Request: &TestRequest{
		Name: GetEventRequest.Name,
		Values: []Value{
			Value{
				Name:  "controller",
				Type:  "uint32",
				Value: CONTROLLER,
			},
			Value{
				Name:  "index",
				Type:  "uint32",
				Value: EVENT_INDEX,
			},
		},
		Message: []uint8{
			0x17, 0xb0, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x25, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		},
	},
	Response: &TestResponse{
		Name: GetEventResponse.Name,
		Values: []Value{
			Value{
				Name:  "controller",
				Type:  "uint32",
				Value: CONTROLLER,
			},
			Value{
				Name:  "index",
				Type:  "uint32",
				Value: EVENT_INDEX,
			},
			Value{
				Name:  "event type",
				Type:  "uint8",
				Value: 2,
			},
			Value{
				Name:  "access granted",
				Type:  "bool",
				Value: true,
			},
			Value{
				Name:  "door",
				Type:  "uint8",
				Value: 4,
			},
			Value{
				Name:  "direction",
				Type:  "uint8",
				Value: 1,
			},
			Value{
				Name:  "card",
				Type:  "uint32",
				Value: "8165536",
			},
			Value{
				Name:  "timestamp",
				Type:  "optional datetime",
				Value: "2019-08-04 20:02:07",
			},
			Value{
				Name:  "reason",
				Type:  "uint8",
				Value: 6,
			},
		},
		Message: []uint8{
			0x17, 0xb0, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x25, 0x00, 0x00, 0x00, 0x02, 0x01, 0x04, 0x01,
			0xa0, 0x98, 0x7c, 0x00, 0x20, 0x19, 0x08, 0x04, 0x20, 0x02, 0x07, 0x06, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		},
	},
}

var GetEventIndexTest = Test{
	Name: "get event index",
	Request: &TestRequest{
		Name: GetEventIndexRequest.Name,
		Values: []Value{
			Value{
				Name:  "controller",
				Type:  "uint32",
				Value: CONTROLLER,
			},
		},
		Message: []uint8{
			0x17, 0xb4, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		},
	},
	Response: &TestResponse{
		Name: GetEventIndexResponse.Name,
		Values: []Value{
			Value{
				Name:  "controller",
				Type:  "uint32",
				Value: CONTROLLER,
			},
			Value{
				Name:  "event index",
				Type:  "uint32",
				Value: "37",
			},
		},
		Message: []uint8{
			0x17, 0xb4, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x25, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		},
	},
}

var SetEventIndexTest = Test{
	Name: "set event index",
	Request: &TestRequest{
		Name: SetEventIndexRequest.Name,
		Values: []Value{
			Value{
				Name:  "controller",
				Type:  "uint32",
				Value: CONTROLLER,
			},
			Value{
				Name:  "index",
				Type:  "uint32",
				Value: EVENT_INDEX,
			},
		},
		Message: []uint8{
			0x17, 0xb2, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x25, 0x00, 0x00, 0x00, 0x55, 0xaa, 0xaa, 0x55,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		},
	},
	Response: &TestResponse{
		Name: SetEventIndexResponse.Name,
		Values: []Value{
			Value{
				Name:  "controller",
				Type:  "uint32",
				Value: CONTROLLER,
			},
			Value{
				Name:  "updated",
				Type:  "bool",
				Value: true,
			},
		},
		Message: []uint8{
			0x17, 0xb2, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		},
	},
}

var RecordSpecialEventsTest = Test{
	Name: "record special events",
	Request: &TestRequest{
		Name: RecordSpecialEventsRequest.Name,
		Values: []Value{
			Value{
				Name:  "controller",
				Type:  "uint32",
				Value: CONTROLLER,
			},
			Value{
				Name:  "enabled",
				Type:  "bool",
				Value: "true",
			},
		},
		Message: []uint8{
			0x17, 0x8e, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		},
	},
	Response: &TestResponse{
		Name: RecordSpecialEventsResponse.Name,
		Values: []Value{
			Value{
				Name:  "controller",
				Type:  "uint32",
				Value: CONTROLLER,
			},
			Value{
				Name:  "updated",
				Type:  "bool",
				Value: true,
			},
		},
		Message: []uint8{
			0x17, 0x8e, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		},
	},
}

var GetTimeProfileTest = Test{
	Name: "get time profile",
	Request: &TestRequest{
		Name: GetTimeProfileRequest.Name,
		Values: []Value{
			Value{
				Name:  "controller",
				Type:  "uint32",
				Value: CONTROLLER,
			},
			Value{
				Name:  "profile id",
				Type:  "uint8",
				Value: TIME_PROFILE_ID,
			},
		},
		Message: []uint8{
			0x17, 0x98, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		},
	},
	Response: &TestResponse{
		Name: GetTimeProfileResponse.Name,
		Values: []Value{
			Value{
				Name:  "controller",
				Type:  "uint32",
				Value: CONTROLLER,
			},
			Value{
				Name:  "profile id",
				Type:  "uint8",
				Value: 29,
			},
			Value{
				Name:  "start date",
				Type:  "optional date",
				Value: "2022-01-01",
			},
			Value{
				Name:  "end date",
				Type:  "optional date",
				Value: "2022-12-31",
			},
			Value{
				Name:  "monday",
				Type:  "bool",
				Value: true,
			},
			Value{
				Name:  "tuesday",
				Type:  "bool",
				Value: false,
			},
			Value{
				Name:  "wednesday",
				Type:  "bool",
				Value: true,
			},
			Value{
				Name:  "thursday",
				Type:  "bool",
				Value: true,
			},
			Value{
				Name:  "friday",
				Type:  "bool",
				Value: false,
			},
			Value{
				Name:  "saturday",
				Type:  "bool",
				Value: false,
			},
			Value{
				Name:  "sunday",
				Type:  "bool",
				Value: true,
			},
			Value{
				Name:  "segment 1 start",
				Type:  "HHmm",
				Value: "08:30",
			},
			Value{
				Name:  "segment 1 end",
				Type:  "HHmm",
				Value: "11:45",
			},
			Value{
				Name:  "segment 2 start",
				Type:  "HHmm",
				Value: "13:00",
			},
			Value{
				Name:  "segment 2 end",
				Type:  "HHmm",
				Value: "17:15",
			},
			Value{
				Name:  "segment 3 start",
				Type:  "HHmm",
				Value: "19:15",
			},
			Value{
				Name:  "segment 3 end",
				Type:  "HHmm",
				Value: "21:05",
			},
			Value{
				Name:  "linked profile id",
				Type:  "uint8",
				Value: 31,
			},
		},
		Message: []uint8{
			0x17, 0x98, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x1d, 0x20, 0x22, 0x01, 0x01, 0x20, 0x22, 0x12,
			0x31, 0x01, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x08, 0x30, 0x11, 0x45, 0x13, 0x00, 0x17, 0x15,
			0x19, 0x15, 0x21, 0x05, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		},
	},
}

var SetTimeProfileTest = Test{
	Name: "set time profile",
	Request: &TestRequest{
		Name: SetTimeProfileRequest.Name,
		Values: []Value{
			Value{
				Name:  "controller",
				Type:  "uint32",
				Value: CONTROLLER,
			},
			Value{
				Name:  "profile id",
				Type:  "uint8",
				Value: TIME_PROFILE_ID,
			},
			Value{
				Name:  "start date",
				Type:  "date",
				Value: "2022-01-01",
			},
			Value{
				Name:  "end date",
				Type:  "date",
				Value: "2022-12-31",
			},
			Value{
				Name:  "monday",
				Type:  "bool",
				Value: "true",
			},
			Value{
				Name:  "tuesday",
				Type:  "bool",
				Value: "false",
			},
			Value{
				Name:  "wednesday",
				Type:  "bool",
				Value: "true",
			},
			Value{
				Name:  "thursday",
				Type:  "bool",
				Value: "true",
			},
			Value{
				Name:  "friday",
				Type:  "bool",
				Value: "false",
			},
			Value{
				Name:  "saturday",
				Type:  "bool",
				Value: "false",
			},
			Value{
				Name:  "sunday",
				Type:  "bool",
				Value: "true",
			},
			Value{
				Name:  "segment 1 start",
				Type:  "HHmm",
				Value: "08:30",
			},
			Value{
				Name:  "segment 1 end",
				Type:  "HHmm",
				Value: "11:45",
			},
			Value{
				Name:  "segment 2 start",
				Type:  "HHmm",
				Value: "13:15",
			},
			Value{
				Name:  "segment 2 end",
				Type:  "HHmm",
				Value: "16:30",
			},
			Value{
				Name:  "segment 3 start",
				Type:  "HHmm",
				Value: "19:30",
			},
			Value{
				Name:  "segment 3 end",
				Type:  "HHmm",
				Value: "20:55",
			},
			Value{
				Name:  "linked profile id",
				Type:  "uint8",
				Value: "30",
			},
		},
		Message: []uint8{
			0x17, 0x88, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x1d, 0x20, 0x22, 0x01, 0x01, 0x20, 0x22, 0x12,
			0x31, 0x01, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x08, 0x30, 0x11, 0x45, 0x13, 0x15, 0x16, 0x30,
			0x19, 0x30, 0x20, 0x55, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		},
	},
	Response: &TestResponse{
		Name: SetTimeProfileResponse.Name,
		Values: []Value{
			Value{
				Name:  "controller",
				Type:  "uint32",
				Value: CONTROLLER,
			},
			Value{
				Name:  "stored",
				Type:  "bool",
				Value: true,
			},
		},
		Message: []uint8{
			0x17, 0x88, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		},
	},
}

var DeleteAllTimeProfilesTest = Test{
	Name: "delete all time profiles",
	Request: &TestRequest{
		Name: DeleteAllTimeProfilesRequest.Name,
		Values: []Value{
			Value{
				Name:  "controller",
				Type:  "uint32",
				Value: CONTROLLER,
			},
		},
		Message: []uint8{
			0x17, 0x8a, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x55, 0xaa, 0xaa, 0x55, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		},
	},
	Response: &TestResponse{
		Name: DeleteAllTimeProfilesResponse.Name,
		Values: []Value{
			Value{
				Name:  "controller",
				Type:  "uint32",
				Value: CONTROLLER,
			},
			Value{
				Name:  "deleted",
				Type:  "bool",
				Value: true,
			},
		},
		Message: []uint8{
			0x17, 0x8a, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		},
	},
}

var AddTaskTest = Test{
	Name: "add task",
	Request: &TestRequest{
		Name: AddTaskRequest.Name,
		Values: []Value{
			Value{
				Name:  "controller",
				Type:  "uint32",
				Value: CONTROLLER,
			},
			Value{
				Name:  "start date",
				Type:  "date",
				Value: "2022-01-01",
			},
			Value{
				Name:  "end date",
				Type:  "date",
				Value: "2022-12-31",
			},
			Value{
				Name:  "monday",
				Type:  "bool",
				Value: "true",
			},
			Value{
				Name:  "tuesday",
				Type:  "bool",
				Value: "false",
			},
			Value{
				Name:  "wednesday",
				Type:  "bool",
				Value: "true",
			},
			Value{
				Name:  "thursday",
				Type:  "bool",
				Value: "true",
			},
			Value{
				Name:  "friday",
				Type:  "bool",
				Value: "false",
			},
			Value{
				Name:  "saturday",
				Type:  "bool",
				Value: "false",
			},
			Value{
				Name:  "sunday",
				Type:  "bool",
				Value: "true",
			},
			Value{
				Name:  "start time",
				Type:  "HHmm",
				Value: "08:30",
			},
			Value{
				Name:  "door",
				Type:  "uint8",
				Value: "3",
			},
			Value{
				Name:  "task type",
				Type:  "uint8",
				Value: "2",
			},
			Value{
				Name:  "more cards",
				Type:  "uint8",
				Value: "17",
			},
		},
		Message: []uint8{
			0x17, 0xa8, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x20, 0x22, 0x01, 0x01, 0x20, 0x22, 0x12, 0x31,
			0x01, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x08, 0x30, 0x03, 0x02, 0x11, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		},
	},
	Response: &TestResponse{
		Name: AddTaskResponse.Name,
		Values: []Value{
			Value{
				Name:  "controller",
				Type:  "uint32",
				Value: CONTROLLER,
			},
			Value{
				Name:  "added",
				Type:  "bool",
				Value: true,
			},
		},
		Message: []uint8{
			0x17, 0xa8, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		},
	},
}

var RefreshTaskListTest = Test{
	Name: "refresh tasklist",
	Request: &TestRequest{
		Name: RefreshTaskListRequest.Name,
		Values: []Value{
			Value{
				Name:  "controller",
				Type:  "uint32",
				Value: CONTROLLER,
			},
		},
		Message: []uint8{
			0x17, 0xac, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x55, 0xaa, 0xaa, 0x55, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		},
	},
	Response: &TestResponse{
		Name: RefreshTaskListResponse.Name,
		Values: []Value{
			Value{
				Name:  "controller",
				Type:  "uint32",
				Value: CONTROLLER,
			},
			Value{
				Name:  "refreshed",
				Type:  "bool",
				Value: true,
			},
		},
		Message: []uint8{
			0x17, 0xac, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		},
	},
}

var ClearTaskListTest = Test{
	Name: "clear tasklist",
	Request: &TestRequest{
		Name: ClearTaskListRequest.Name,
		Values: []Value{
			Value{
				Name:  "controller",
				Type:  "uint32",
				Value: CONTROLLER,
			},
		},
		Message: []uint8{
			0x17, 0xa6, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x55, 0xaa, 0xaa, 0x55, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		},
	},
	Response: &TestResponse{
		Name: ClearTaskListResponse.Name,
		Values: []Value{
			Value{
				Name:  "controller",
				Type:  "uint32",
				Value: CONTROLLER,
			},
			Value{
				Name:  "cleared",
				Type:  "bool",
				Value: true,
			},
		},
		Message: []uint8{
			0x17, 0xa6, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		},
	},
}

var SetPCControlTest = Test{
	Name: "set pc control",
	Request: &TestRequest{
		Name: SetPCControlRequest.Name,
		Values: []Value{
			Value{
				Name:  "controller",
				Type:  "uint32",
				Value: CONTROLLER,
			},
			Value{
				Name:  "enabled",
				Type:  "bool",
				Value: "true",
			},
		},
		Message: []uint8{
			0x17, 0xa0, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x55, 0xaa, 0xaa, 0x55, 0x01, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		},
	},
	Response: &TestResponse{
		Name: SetPCControlResponse.Name,
		Values: []Value{
			Value{
				Name:  "controller",
				Type:  "uint32",
				Value: CONTROLLER,
			},
			Value{
				Name:  "ok",
				Type:  "bool",
				Value: true,
			},
		},
		Message: []uint8{
			0x17, 0xa0, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		},
	},
}

var SetInterlockTest = Test{
	Name: "set interlock",
	Request: &TestRequest{
		Name: SetInterlockRequest.Name,
		Values: []Value{
			Value{
				Name:  "controller",
				Type:  "uint32",
				Value: CONTROLLER,
			},
			Value{
				Name:  "interlock",
				Type:  "uint8",
				Value: "4",
			},
		},
		Message: []uint8{
			0x17, 0xa2, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		},
	},
	Response: &TestResponse{
		Name: SetInterlockResponse.Name,
		Values: []Value{
			Value{
				Name:  "controller",
				Type:  "uint32",
				Value: CONTROLLER,
			},
			Value{
				Name:  "ok",
				Type:  "bool",
				Value: true,
			},
		},
		Message: []uint8{
			0x17, 0xa2, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		},
	},
}

var ActivateKeypadsTest = Test{
	Name: "activate keypads",
	Request: &TestRequest{
		Name: ActivateKeypadsRequest.Name,
		Values: []Value{
			Value{
				Name:  "controller",
				Type:  "uint32",
				Value: CONTROLLER,
			},
			Value{
				Name:  "reader 1",
				Type:  "bool",
				Value: "true",
			},
			Value{
				Name:  "reader 2",
				Type:  "bool",
				Value: "true",
			},
			Value{
				Name:  "reader 3",
				Type:  "bool",
				Value: "false",
			},
			Value{
				Name:  "reader 4",
				Type:  "bool",
				Value: "true",
			},
		},
		Message: []uint8{
			0x17, 0xa4, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x01, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		},
	},
	Response: &TestResponse{
		Name: ActivateKeypadsResponse.Name,
		Values: []Value{
			Value{
				Name:  "controller",
				Type:  "uint32",
				Value: CONTROLLER,
			},
			Value{
				Name:  "ok",
				Type:  "bool",
				Value: true,
			},
		},
		Message: []uint8{
			0x17, 0xa4, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		},
	},
}

var SetDoorPasscodesTest = Test{
	Name: "set door passcodes",
	Request: &TestRequest{
		Name: SetDoorPasscodesRequest.Name,
		Values: []Value{
			Value{
				Name:  "controller",
				Type:  "uint32",
				Value: CONTROLLER,
			},
			Value{
				Name:  "door",
				Type:  "uint8",
				Value: DOOR,
			},
			Value{
				Name:  "passcode 1",
				Type:  "uint32",
				Value: "12345",
			},
			Value{
				Name:  "passcode 2",
				Type:  "uint32",
				Value: "0",
			},
			Value{
				Name:  "passcode 3",
				Type:  "uint32",
				Value: "999999",
			},
			Value{
				Name:  "passcode 4",
				Type:  "uint32",
				Value: "54321",
			},
		},
		Message: []uint8{
			0x17, 0x8c, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x03, 0x00, 0x00, 0x00, 0x39, 0x30, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x3f, 0x42, 0x0f, 0x00, 0x31, 0xd4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		},
	},
	Response: &TestResponse{
		Name: SetDoorPasscodesResponse.Name,
		Values: []Value{
			Value{
				Name:  "controller",
				Type:  "uint32",
				Value: CONTROLLER,
			},
			Value{
				Name:  "ok",
				Type:  "bool",
				Value: true,
			},
		},
		Message: []uint8{
			0x17, 0x8c, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		},
	},
}

var GetAntiPassbackTest = Test{
	Name: "get antipassback",
	Request: &TestRequest{
		Name: GetAntiPassbackRequest.Name,
		Values: []Value{
			Value{
				Name:  "controller",
				Type:  "uint32",
				Value: CONTROLLER,
			},
		},
		Message: []uint8{
			0x17, 0x86, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		},
	},
	Response: &TestResponse{
		Name: GetAntiPassbackResponse.Name,
		Values: []Value{
			Value{
				Name:  "controller",
				Type:  "uint32",
				Value: CONTROLLER,
			},
			Value{
				Name:  "antipassback",
				Type:  "uint8",
				Value: 2,
			},
		},
		Message: []uint8{
			0x17, 0x86, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		},
	},
}

var SetAntiPassbackTest = Test{
	Name: "set antipassback",
	Request: &TestRequest{
		Name: SetAntiPassbackRequest.Name,
		Values: []Value{
			Value{
				Name:  "controller",
				Type:  "uint32",
				Value: CONTROLLER,
			},
			Value{
				Name:  "antipassback",
				Type:  "uint8",
				Value: 2,
			},
		},
		Message: []uint8{
			0x17, 0x84, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		},
	},
	Response: &TestResponse{
		Name: SetAntiPassbackResponse.Name,
		Values: []Value{
			Value{
				Name:  "controller",
				Type:  "uint32",
				Value: CONTROLLER,
			},
			Value{
				Name:  "ok",
				Type:  "bool",
				Value: true,
			},
		},
		Message: []uint8{
			0x17, 0x84, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		},
	},
}

var RestoreDefaultParametersTest = Test{
	Name: "restore default parameters",
	Request: &TestRequest{
		Name: RestoreDefaultParametersRequest.Name,
		Values: []Value{
			Value{
				Name:  "controller",
				Type:  "uint32",
				Value: CONTROLLER,
			},
		},
		Message: []uint8{
			0x17, 0xc8, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x55, 0xaa, 0xaa, 0x55, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		},
	},
	Response: &TestResponse{
		Name: RestoreDefaultParametersResponse.Name,
		Values: []Value{
			Value{
				Name:  "controller",
				Type:  "uint32",
				Value: CONTROLLER,
			},
			Value{
				Name:  "reset",
				Type:  "bool",
				Value: true,
			},
		},
		Message: []uint8{
			0x17, 0xc8, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		},
	},
}
